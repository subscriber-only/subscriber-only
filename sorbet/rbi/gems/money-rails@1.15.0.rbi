# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `money-rails` gem.
# Please instead update this file by running `bin/tapioca gem money-rails`.

# Class name does not really matches the folder hierarchy, because
# in order for (de)serialization to work, the class must be re-opened.
# But this file brings mongoid 2.X compat., so...
#
# source://money-rails//lib/money-rails/money.rb#4
class Money
  # source://money/6.16.0/lib/money/money.rb#340
  def initialize(obj, currency = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://money/6.16.0/lib/money/money.rb#594
  def allocate(parts); end

  # source://money/6.16.0/lib/money/money.rb#385
  def amount; end

  # source://money/6.16.0/lib/money/money.rb#560
  def as_ca_dollar; end

  # source://money/6.16.0/lib/money/money.rb#572
  def as_euro; end

  # source://money/6.16.0/lib/money/money.rb#548
  def as_us_dollar; end

  # source://money/6.16.0/lib/money/money.rb#88
  def bank; end

  # source://money/6.16.0/lib/money/money.rb#33
  def cents; end

  # source://money/6.16.0/lib/money/money.rb#88
  def currency; end

  # source://money/6.16.0/lib/money/money.rb#395
  def currency_as_string; end

  # source://money/6.16.0/lib/money/money.rb#408
  def currency_as_string=(val); end

  # source://money/6.16.0/lib/money/money.rb#643
  def decimal_mark; end

  # source://money/6.16.0/lib/money/money.rb#371
  def dollars; end

  # source://money/6.16.0/lib/money/money.rb#648
  def dup_with(options = T.unsafe(nil)); end

  # source://money/6.16.0/lib/money/money.rb#531
  def exchange_to(other_currency, &rounding_method); end

  # source://money/6.16.0/lib/money/money.rb#626
  def format(*rules); end

  # source://money/6.16.0/lib/money/money.rb#53
  def fractional; end

  # source://money/6.16.0/lib/money/money.rb#421
  def hash; end

  # source://money/6.16.0/lib/money/money.rb#438
  def inspect; end

  # source://money/6.16.0/lib/money/money.rb#615
  def round(rounding_mode = T.unsafe(nil), rounding_precision = T.unsafe(nil)); end

  # source://money/6.16.0/lib/money/money.rb#70
  def round_to_nearest_cash_value; end

  # source://money/6.16.0/lib/money/money.rb#594
  def split(parts); end

  # source://money/6.16.0/lib/money/money.rb#431
  def symbol; end

  # source://money/6.16.0/lib/money/money.rb#634
  def thousands_separator; end

  # source://money/6.16.0/lib/money/money.rb#461
  def to_d; end

  # source://money/6.16.0/lib/money/money.rb#484
  def to_f; end

  # This is expected to be called by ActiveSupport when calling as_json an Money object
  #
  # source://money-rails//lib/money-rails/money.rb#26
  def to_hash; end

  # source://money/6.16.0/lib/money/money.rb#471
  def to_i; end

  # source://money/6.16.0/lib/money/money.rb#506
  def to_money(given_currency = T.unsafe(nil)); end

  # source://money/6.16.0/lib/money/money.rb#448
  def to_s; end

  # source://money/6.16.0/lib/money/money.rb#494
  def with_currency(new_currency); end

  private

  # source://money/6.16.0/lib/money/money.rb#658
  def as_d(num); end

  # source://money/6.16.0/lib/money/money.rb#674
  def locale_backend; end

  # source://money/6.16.0/lib/money/money.rb#666
  def return_value(value); end

  class << self
    # source://money/6.16.0/lib/money/money.rb#282
    def add_rate(from_currency, to_currency, rate); end

    # source://money/6.16.0/lib/money/money.rb#132
    def conversion_precision; end

    # source://money/6.16.0/lib/money/money.rb#132
    def conversion_precision=(_arg0); end

    # source://money/6.16.0/lib/money/money.rb#171
    def default_bank; end

    # source://money/6.16.0/lib/money/money.rb#134
    def default_bank=(_arg0); end

    # source://money/6.16.0/lib/money/money.rb#152
    def default_currency; end

    # source://money/6.16.0/lib/money/money.rb#166
    def default_currency=(currency); end

    # source://money-rails//lib/money-rails/money.rb#8
    def default_formatting_rules; end

    # source://money/6.16.0/lib/money/money.rb#132
    def default_formatting_rules=(_arg0); end

    # source://money/6.16.0/lib/money/money.rb#132
    def default_infinite_precision; end

    # source://money/6.16.0/lib/money/money.rb#132
    def default_infinite_precision=(_arg0); end

    # source://money/6.16.0/lib/money/money.rb#288
    def disallow_currency_conversion!; end

    # source://money/6.16.0/lib/money/money.rb#307
    def from_amount(amount, currency = T.unsafe(nil), options = T.unsafe(nil)); end

    def from_cents(*_arg0); end

    # source://money/6.16.0/lib/money/money.rb#136
    def infinite_precision; end

    # source://money/6.16.0/lib/money/money.rb#141
    def infinite_precision=(value); end

    # source://money/6.16.0/lib/money/money.rb#224
    def inherited(base); end

    # source://money/6.16.0/lib/money/money.rb#133
    def locale_backend; end

    # source://money/6.16.0/lib/money/money.rb#179
    def locale_backend=(value); end

    # source://money/6.16.0/lib/money/money.rb#132
    def orig_default_formatting_rules; end

    # source://money/6.16.0/lib/money/money.rb#235
    def rounding_mode(mode = T.unsafe(nil)); end

    # source://money/6.16.0/lib/money/money.rb#184
    def rounding_mode=(new_rounding_mode); end

    # source://money/6.16.0/lib/money/money.rb#199
    def setup_defaults; end

    # source://money/6.16.0/lib/money/money.rb#133
    def use_i18n; end

    # source://money/6.16.0/lib/money/money.rb#189
    def use_i18n=(value); end

    # source://money/6.16.0/lib/money/money.rb#265
    def with_rounding_mode(mode); end
  end
end

# source://money-rails//lib/money-rails/configuration.rb#5
module MoneyRails
  extend ::MoneyRails::Configuration
end

# MoneyRails configuration module.
# This is extended by MoneyRails to provide configuration settings.
#
# source://money-rails//lib/money-rails/configuration.rb#9
module MoneyRails::Configuration
  # source://money-rails//lib/money-rails/configuration.rb#64
  def add_rate(*_arg0, **_arg1, &_arg2); end

  # source://money-rails//lib/money-rails/configuration.rb#71
  def amount_column; end

  # source://money-rails//lib/money-rails/configuration.rb#71
  def amount_column=(val); end

  # Start a MoneyRails configuration block in an initializer.
  #
  # example: Provide a default currency for the application
  #   MoneyRails.configure do |config|
  #     config.default_currency = :eur
  #   end
  #
  # @yield [_self]
  # @yieldparam _self [MoneyRails::Configuration] the object that the method was called on
  #
  # source://money-rails//lib/money-rails/configuration.rb#16
  def configure; end

  # source://money-rails//lib/money-rails/configuration.rb#74
  def currency_column; end

  # source://money-rails//lib/money-rails/configuration.rb#74
  def currency_column=(val); end

  # source://money-rails//lib/money-rails/configuration.rb#61
  def default_bank(*_arg0, **_arg1, &_arg2); end

  # source://money-rails//lib/money-rails/configuration.rb#61
  def default_bank=(arg); end

  # Configuration parameters
  #
  # source://money-rails//lib/money-rails/configuration.rb#22
  def default_currency; end

  # Set default currency of money library
  #
  # source://money-rails//lib/money-rails/configuration.rb#27
  def default_currency=(currency_name); end

  # source://money-rails//lib/money-rails/configuration.rb#87
  def default_format; end

  # source://money-rails//lib/money-rails/configuration.rb#87
  def default_format=(val); end

  # source://money-rails//lib/money-rails/configuration.rb#67
  def include_validations; end

  # source://money-rails//lib/money-rails/configuration.rb#67
  def include_validations=(val); end

  # source://money-rails//lib/money-rails/configuration.rb#61
  def locale_backend(*_arg0, **_arg1, &_arg2); end

  # source://money-rails//lib/money-rails/configuration.rb#61
  def locale_backend=(arg); end

  # source://money-rails//lib/money-rails/configuration.rb#78
  def no_cents_if_whole; end

  # source://money-rails//lib/money-rails/configuration.rb#78
  def no_cents_if_whole=(val); end

  # source://money-rails//lib/money-rails/configuration.rb#96
  def preserve_user_input; end

  # source://money-rails//lib/money-rails/configuration.rb#96
  def preserve_user_input=(val); end

  # source://money-rails//lib/money-rails/configuration.rb#92
  def raise_error_on_money_parsing; end

  # source://money-rails//lib/money-rails/configuration.rb#92
  def raise_error_on_money_parsing=(val); end

  # Register a custom currency
  #
  # source://money-rails//lib/money-rails/configuration.rb#33
  def register_currency=(currency_options); end

  # @raise [ArgumentError]
  #
  # source://money-rails//lib/money-rails/configuration.rb#42
  def rounding_mode=(mode); end

  # source://money-rails//lib/money-rails/configuration.rb#37
  def set_currency_column_for_default_currency!; end

  # source://money-rails//lib/money-rails/configuration.rb#84
  def sign_before_symbol; end

  # source://money-rails//lib/money-rails/configuration.rb#84
  def sign_before_symbol=(val); end

  # source://money-rails//lib/money-rails/configuration.rb#81
  def symbol; end

  # source://money-rails//lib/money-rails/configuration.rb#81
  def symbol=(val); end

  class << self
    # source://money-rails//lib/money-rails/configuration.rb#71
    def amount_column; end

    # source://money-rails//lib/money-rails/configuration.rb#71
    def amount_column=(val); end

    # source://money-rails//lib/money-rails/configuration.rb#74
    def currency_column; end

    # source://money-rails//lib/money-rails/configuration.rb#74
    def currency_column=(val); end

    # source://money-rails//lib/money-rails/configuration.rb#87
    def default_format; end

    # source://money-rails//lib/money-rails/configuration.rb#87
    def default_format=(val); end

    # source://money-rails//lib/money-rails/configuration.rb#67
    def include_validations; end

    # source://money-rails//lib/money-rails/configuration.rb#67
    def include_validations=(val); end

    # source://money-rails//lib/money-rails/configuration.rb#78
    def no_cents_if_whole; end

    # source://money-rails//lib/money-rails/configuration.rb#78
    def no_cents_if_whole=(val); end

    # source://money-rails//lib/money-rails/configuration.rb#96
    def preserve_user_input; end

    # source://money-rails//lib/money-rails/configuration.rb#96
    def preserve_user_input=(val); end

    # source://money-rails//lib/money-rails/configuration.rb#92
    def raise_error_on_money_parsing; end

    # source://money-rails//lib/money-rails/configuration.rb#92
    def raise_error_on_money_parsing=(val); end

    # source://money-rails//lib/money-rails/configuration.rb#84
    def sign_before_symbol; end

    # source://money-rails//lib/money-rails/configuration.rb#84
    def sign_before_symbol=(val); end

    # source://money-rails//lib/money-rails/configuration.rb#81
    def symbol; end

    # source://money-rails//lib/money-rails/configuration.rb#81
    def symbol=(val); end
  end
end

# source://money-rails//lib/money-rails/engine.rb#2
class MoneyRails::Engine < ::Rails::Engine
  class << self
    # source://activesupport/7.0.4.3/lib/active_support/callbacks.rb#68
    def __callbacks; end
  end
end

# source://money-rails//lib/money-rails/errors.rb#2
class MoneyRails::Error < ::StandardError; end

# source://money-rails//lib/money-rails/hooks.rb#2
class MoneyRails::Hooks
  class << self
    # source://money-rails//lib/money-rails/hooks.rb#5
    def init; end
  end
end

# source://money-rails//lib/money-rails/hooks.rb#3
MoneyRails::Hooks::PG_ADAPTERS = T.let(T.unsafe(nil), Array)

# source://money-rails//lib/money-rails/railtie.rb#2
class MoneyRails::Railtie < ::Rails::Railtie; end

# source://money-rails//lib/money-rails/version.rb#2
MoneyRails::VERSION = T.let(T.unsafe(nil), String)
